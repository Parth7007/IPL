import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

# Load processed data
df = pd.read_csv('ipl_processed_data.csv')

# Define numerical features (excluding alphabetical columns and target)
feature_columns = [
    'inning', 'balls_bowled', 'runs_total', 'current_runs', 'current_wickets',
    'batting_team_encoded', 'bowling_team_encoded', 'venue_encoded',
    'balls_remaining', 'current_run_rate', 'team_avg_score', 'bowling_avg_conceded', 
    'venue_avg_score'
]

# Features and target
X = df[feature_columns]
y = df['final_score']

# Split data (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the final XGBoost model (tuned parameters)
final_model = XGBRegressor(
    n_estimators=200,
    learning_rate=0.05,
    max_depth=6,
    min_child_weight=1,
    subsample=0.8,
    colsample_bytree=0.8,
    reg_lambda=1,
    reg_alpha=0,
    random_state=42
)

# Train the model
print("Training Final XGBoost Model...")
final_model.fit(X_train, y_train)

# Predict and evaluate
y_pred = final_model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

# Print results
print("\nFinal XGBoost Results:")
print(f"MAE: {mae:.2f}")
print(f"MSE: {mse:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ²: {r2:.2f}")

# Save the model
joblib.dump(final_model, 'xgboost_ipl_model.pkl')
print("Model saved as 'xgboost_ipl_model.pkl'")

# Create and save encoder mappings (using original columns for reference)
le_batting = LabelEncoder()
le_bowling = LabelEncoder()
le_venue = LabelEncoder()

# Fit encoders on original columns (assuming they match the encoded values)
le_batting.fit(df['batting_team'])
le_bowling.fit(df['bowling_team'])
le_venue.fit(df['venue'])

# Verify encoder consistency with encoded columns
batting_encoded_check = le_batting.transform(df['batting_team'])
bowling_encoded_check = le_bowling.transform(df['bowling_team'])
venue_encoded_check = le_venue.transform(df['venue'])

if not (df['batting_team_encoded'].equals(pd.Series(batting_encoded_check)) and
        df['bowling_team_encoded'].equals(pd.Series(bowling_encoded_check)) and
        df['venue_encoded'].equals(pd.Series(venue_encoded_check))):
    print("Warning: Encoder mappings may not match pre-encoded columns!")

# Save encoders
joblib.dump(le_batting, 'batting_team_encoder.pkl')
joblib.dump(le_bowling, 'bowling_team_encoder.pkl')
joblib.dump(le_venue, 'venue_encoder.pkl')
print("Encoders saved as 'batting_team_encoder.pkl', 'bowling_team_encoder.pkl', 'venue_encoder.pkl'")

# Feature importance
importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': final_model.feature_importances_
}).sort_values(by='Importance', ascending=False)
print("\nFeature Importance:\n", importance)